#pragma once

#include "ctypes.hu"

struct t_cvec3
{
	union
	{
		struct { float x, y, z; };
		float v[3];
	};

	__device__ __host__
	t_cvec3() : x(0), y(0), z(0) {}
	__device__ __host__
	t_cvec3(const t_vec3 &rhs) : x(rhs.s.x), y(rhs.s.y), z(rhs.s.z) {}
	__device__ __host__
	t_cvec3(float rhs[3]) : x(rhs[0]), y(rhs[1]), z(rhs[2]) {}
	__device__ __host__
	t_cvec3(float f) : x(f), y(f), z(f) {}

	__device__ __host__
	t_cvec3(std::initializer_list<float> rhs)
	{
		std::memcpy(v, rhs.begin(), sizeof(v));
	}

	__device__ __host__
	t_cvec3 operator+(const t_cvec3 &rhs) const
	{
		return {v[0] + rhs[0],
				v[1] + rhs[1],
				v[2] + rhs[2]};
	}

	__device__ __host__
	t_cvec3 operator*(const t_cvec3 &rhs) const
	{
		return {v[0] * rhs[0],
				v[1] * rhs[1],
				v[2] * rhs[2]};
	}

	__device__ __host__
	t_cvec3 operator-(const t_cvec3 &rhs) const
	{
		return {v[0] - rhs[0],
				v[1] - rhs[1],
				v[2] - rhs[2]};
	}

	__device__ __host__
	t_cvec3 operator+(float rhs) const
	{
		return {v[0] + rhs,
				v[1] + rhs,
				v[2] + rhs};
	}

	__device__ __host__
	t_cvec3 operator*(float rhs) const
	{
		return {v[0] * rhs,
				v[1] * rhs,
				v[2] * rhs};
	}

	__device__ __host__
	t_cvec3 operator-(float rhs) const
	{
		return {v[0] - rhs,
				v[1] - rhs,
				v[2] - rhs};
	}

	__device__ __host__
	t_cvec3 &operator+=(float rhs)
	{
		v[0] += rhs;
		v[1] += rhs;
		v[2] += rhs;
		return *this;
	}

	__device__ __host__
	t_cvec3 &operator+=(const t_cvec3 &rhs)
	{
		v[0] += rhs[0];
		v[1] += rhs[1];
		v[2] += rhs[2];
		return *this;
	}
	
	__device__ __host__
	float operator[](int n) const
	{
		return v[n];
	}

	__device__ __host__
	float operator[](int n)
	{
		return v[n];
	}

	__device__ __host__
	float dot(const t_cvec3 &rhs) const
	{
		return ((*this)[0] * rhs[0] +
				(*this)[1] * rhs[1] +
				(*this)[2] * rhs[2]);
	}
	
	__device__ __host__
	float norme()
	{
		return sqrtf(this->dot(*this));
	}

	__device__ __host__
	const t_cvec3 &normalize()
	{
		float n = rsqrtf(this->dot(*this));
		this->x *= n;
		this->y *= n;
		this->z *= n;
		return *this;
	}

	__device__ __host__
	t_cvec3 reflect(const t_cvec3 &n) const
	{
		return *this - (n * 2 * n.dot(*this));
	}

	__device__ __host__
	t_cvec3 cross(const t_cvec3 &rhs)
	{
		return {
			this->y * rhs[2] - this->z * rhs[1],
			this->z * rhs[0] - this->x * rhs[2],
			this->x * rhs[1] - this->y * rhs[0]
		};
	}

	__device__ __host__
	t_cvec3 reflect(const t_cvec3 &n)
	{
		return *this - (n * (2 * n.dot(*this)));
	}

	__device__ __host__
	t_cvec3 mix(t_cvec3 rhs, float t)
	{
		return (*this * (1.0f - t) + rhs * t);
	}
};
