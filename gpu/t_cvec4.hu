#pragma once

#include "t_cvec3.hu"

struct t_cvec4
{
	union
	{
		struct { float x, y, z, w; };
		float v[4];
	};

	__device__ __host__
	t_cvec4() : x(0), y(0), z(0), w(0) {}
	__device__ __host__
	t_cvec4(const t_vec4 &rhs) : x(rhs.s.x), y(rhs.s.y), z(rhs.s.z), w(rhs.s.w) {}
	__device__ __host__
	t_cvec4(const t_cvec3 &rhs, float _w) : x(rhs.x), y(rhs.y), z(rhs.z), w(_w) {}
	__device__ __host__
	t_cvec4(float rhs[4]) : x(rhs[0]), y(rhs[1]), z(rhs[2]), w(rhs[3]) {}
	__device__ __host__
	t_cvec4(float f) : x(f), y(f), z(f), w(f) {}

	__device__ __host__
	t_cvec4(std::initializer_list<float> rhs)
	{
		std::memcpy(v, rhs.begin(), sizeof(v));
	}

	__device__ __host__
	t_cvec4 operator+(const t_cvec4 &rhs) const
	{
		return {v[0] + rhs[0],
				v[1] + rhs[1],
				v[2] + rhs[2],
				v[3] + rhs[3]};
	}

	__device__ __host__
	t_cvec4 operator*(const t_cvec4 &rhs) const
	{
		return {v[0] * rhs[0],
				v[1] * rhs[1],
				v[2] * rhs[2],
				v[3] * rhs[3]};
	}

	__device__ __host__
	t_cvec4 operator-(const t_cvec4 &rhs) const
	{
		return {v[0] - rhs[0],
				v[1] - rhs[1],
				v[2] - rhs[2],
				v[3] - rhs[3]};
	}

	__device__ __host__
	t_cvec4 operator+(float rhs) const
	{
		return {v[0] + rhs,
				v[1] + rhs,
				v[2] + rhs,
				v[3] + rhs};
	}

	__device__ __host__
	t_cvec4 operator*(float rhs) const
	{
		return {v[0] * rhs,
				v[1] * rhs,
				v[2] * rhs,
				v[3] * rhs};
	}

	__device__ __host__
	t_cvec4 operator-(float rhs) const
	{
		return {v[0] - rhs,
				v[1] - rhs,
				v[2] - rhs,
				v[3] - rhs};
	}

	__device__ __host__
	t_cvec4 &operator+=(float rhs)
	{
		v[0] += rhs;
		v[1] += rhs;
		v[2] += rhs;
		v[3] += rhs;
		return *this;
	}

	__device__ __host__
	t_cvec4 &operator+=(const t_cvec4 &rhs)
	{
		v[0] += rhs[0];
		v[1] += rhs[1];
		v[2] += rhs[2];
		v[3] += rhs[3];
		return *this;
	}
	
	__device__ __host__
	float operator[](int n) const
	{
		return v[n];
	}

	__device__ __host__
	float operator[](int n)
	{
		return v[n];
	}
};
