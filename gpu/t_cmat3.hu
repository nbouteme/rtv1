#pragma once

#include "t_cvec3.hu"

struct t_cmat3
{
	t_cvec3 v[3];
	__device__ __host__
	t_cmat3(){}

	__device__ __host__
	t_cmat3(float i)
	{
		v[0] = {i, 0, 0};
		v[1] = {0, i, 0};
		v[2] = {0, 0, i};
	}

	__device__ __host__
	t_cmat3(t_cvec3 _a, t_cvec3 _b, t_cvec3 _c)
	{
		v[0] = _a;
		v[1] = _b;
		v[2] = _c;
	}

	template <typename T>
	__device__ __host__
	T operator*(const T &rhs) const;

	__device__ __host__
	const t_cvec3 &operator[](int n) const
	{
		return v[n];
	}

	__device__ __host__
	t_cmat3 operator+(t_cmat3 f) const
	{
		t_cmat3	ret = *this;
		int i = 0;
		while (i < 3)
		{
			int j = 0;
			while (j < 3)
			{
				ret.v[i].v[j] += f.v[i].v[j];
				++j;
			}
			++i;
		}
		return ret;
	}

	__device__ __host__
	t_cmat3 operator+(float f) const
	{
		t_cmat3	ret = *this;
		int i = 0;
		while (i < 3)
		{
			int j = 0;
			while (j < 3)
				ret.v[i].v[j] += f;
			++i;
		}
		return ret;
	}

	__device__ __host__
	t_cvec3 &operator[](int n)
	{
		return v[n];
	}

	__device__ __host__
	t_cmat3 operator*(float rhs) const
	{
		t_cmat3 ret;
		int i = 0;

		while(i < 3)
		{
			int j = 0;
			while (j < 3)
			{
				auto &ref = ret.v[i].v[j] = v[i].v[j] * rhs;
				++j;
			}
			++i;
		}
		return ret;
	}
	
	t_cmat3 transpose()
	{
		t_cmat3 ret;
		int i = 0;

		while (i < 3)
		{
			int j = 0;
			while (j < 3)
			{
				ret.v[i].v[j] = v[j][i];
				++j;
			}
			++i;
		}
		return (ret);
	}
};

template <>
__device__ __host__
inline t_cvec3 t_cmat3::operator*<t_cvec3>(const t_cvec3 &rhs) const
{
	t_cvec3 ret;
	int i = 0;

	while(i < 3)
	{
		int j = 0;
		while (j < 3)
		{
			ret.v[i] += v[i][j] * rhs.v[j];
			++j;
		}
		++i;
	}
	return ret;
}

template <>
__device__ __host__
inline t_cmat3 t_cmat3::operator*<t_cmat3>(const t_cmat3 &rhs) const
{
	t_cmat3 ret;
	int i = 0;

	while (i < 3)
	{
		int k = 0;
		while (k < 3)
		{
			int j = 0;
			while (j < 3)
			{
				ret.v[i].v[j] += v[i][k] * rhs.v[k][j];
				++j;
			}
			++k;
		}
		++i;
	}
	return ret;
}
