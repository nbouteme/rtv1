#pragma once

#include "ctypes.hu"

struct t_cmat4
{
	t_cvec4 v[4];
	__device__ __host__
	t_cmat4(){}


	__device__ __host__
	t_cmat4(float i)
	{
		v[0] = {i, 0, 0, 0};
		v[1] = {i, i, 0, 0};
		v[2] = {i, 0, i, 0};
		v[2] = {i, 0, 0, i};
	}

	__device__ __host__
	t_cmat4(t_cvec4 _a, t_cvec4 _b, t_cvec4 _c, t_cvec4 _d)
	{
		v[0] = _a;
		v[1] = _b;
		v[2] = _c;
		v[3] = _d;
	}

	__device__ __host__
	t_cmat4(t_mat4 r)
	{
		v[0] = r.v[0];
		v[1] = r.v[1];
		v[2] = r.v[2];
		v[3] = r.v[3];		
	}

	template <typename T>
	__device__ __host__
	T operator*(const T &rhs) const;

	__device__ __host__
	const t_cvec4 &operator[](int n) const
	{
		return v[n];
	}

	__device__ __host__
	t_cvec4 &operator[](int n)
	{
		return v[n];
	}

	__device__ __host__
	void invcoef(float coefs[])
	{
		coefs[ 0] = v[2][2] * v[3][3] - v[3][2] * v[2][3];
		coefs[ 1] = v[1][2] * v[3][3] - v[3][2] * v[1][3];
		coefs[ 2] = v[1][2] * v[2][3] - v[2][2] * v[1][3];
		coefs[ 3] = v[2][1] * v[3][3] - v[3][1] * v[2][3];
		coefs[ 4] = v[1][1] * v[3][3] - v[3][1] * v[1][3];
		coefs[ 5] = v[1][1] * v[2][3] - v[2][1] * v[1][3];
		coefs[ 6] = v[2][1] * v[3][2] - v[3][1] * v[2][2];
		coefs[ 7] = v[1][1] * v[3][2] - v[3][1] * v[1][2];
		coefs[ 8] = v[1][1] * v[2][2] - v[2][1] * v[1][2];
		coefs[ 9] = v[2][0] * v[3][3] - v[3][0] * v[2][3];
		coefs[10] = v[1][0] * v[3][3] - v[3][0] * v[1][3];
		coefs[11] = v[1][0] * v[2][3] - v[2][0] * v[1][3];
		coefs[12] = v[2][0] * v[3][2] - v[3][0] * v[2][2];
		coefs[13] = v[1][0] * v[3][2] - v[3][0] * v[1][2];
		coefs[14] = v[1][0] * v[2][2] - v[2][0] * v[1][2];
		coefs[15] = v[2][0] * v[3][1] - v[3][0] * v[2][1];
		coefs[16] = v[1][0] * v[3][1] - v[3][0] * v[1][1];
		coefs[17] = v[1][0] * v[2][1] - v[2][0] * v[1][1];
	}

	__device__ __host__
	t_cmat4 operator*(float rhs) const
	{
		t_cmat4 ret;
		int i = 0;

		while(i < 4)
		{
			int j = 0;
			while (j < 4)
			{
				auto &ref = ret.v[i].v[j] = v[i].v[j] * rhs;
				++j;
			}
			++i;
		}
		return ret;
	}
	

	__device__ __host__
	t_cmat4 inverse()
	{
		int i;
		float coefs[18];
		t_cvec4 faces[6];
		t_cvec4 vec[4];
		t_cvec4 inv[4];
		t_cvec4 sign[2];
		t_cmat4 inverse;
		t_cvec4 dot;
		t_cvec4 row;

		this->invcoef(coefs);
		i = 0;
		while (i < 6)
		{
			faces[i] = { coefs[i * 3], coefs[i * 3], coefs[i * 3 + 1], coefs[i * 3 + 2] };
			++i;
		}
		i = 0;
		while (i < 4)
		{
			vec[i] = { v[1][i], v[0][i], v[0][i], v[0][i] };
			++i;
		}
		inv[0] = ((vec[1] * faces[0]) - (vec[2] * faces[1])) + (vec[3] * faces[2]);
		inv[1] = ((vec[0] * faces[0]) - (vec[2] * faces[3])) + (vec[3] * faces[4]);
		inv[2] = ((vec[0] * faces[1]) - (vec[1] * faces[3])) + (vec[3] * faces[5]);
		inv[3] = ((vec[0] * faces[2]) - (vec[1] * faces[4])) + (vec[2] * faces[5]);
		sign[0] = {+1, -1, +1, -1};
		sign[1] = {-1, +1, -1, +1};
		i = 0;
		while (i < 4)
		{
			inverse[i] = inv[i] * sign[i % 2];
			row.v[i] = inv[i].v[0];
			++i;
		}
		dot = v[0] * row;
		float det = dot.x + dot.y + dot.z + dot.w;
		return (inverse * (1.0f / det));
	}

	t_cmat3 topleft()
	{
		t_cmat3 ret;
		int i = 0;
		while (i < 3)
		{
			ret.v[i] = {v[i].v[0], v[i].v[1], v[i].v[2]};
			++i;
		}
		return (ret);
	}

};

template <>
__device__ __host__
inline t_cvec4 t_cmat4::operator*<t_cvec4>(const t_cvec4 &rhs) const
{
	t_cvec4 ret;
	int i = 0;

	while(i < 4)
	{
		int j = 0;
		while (j < 4)
		{
			ret.v[i] += v[i][j] * rhs.v[j];
			++j;
		}
		++i;
	}
	return ret;
}

template <>
__device__ __host__
inline t_cmat4 t_cmat4::operator*<t_cmat4>(const t_cmat4 &rhs) const
{
	t_cmat4 ret;
	int i = 0;

	while (i < 4)
	{
		int k = 0;
		while (k < 4)
		{
			int j = 0;
			while (j < 4)
			{
				ret.v[i].v[j] += v[i][k] * rhs.v[k][j];
				++j;
			}
			++k;
		}
		++i;
	}
	return ret;
}

template <>
__device__ __host__
inline t_cvec3 t_cmat4::operator*<t_cvec3>(const t_cvec3 &rhs) const
{
	auto ret = *this * t_cvec4(rhs, 1.0f);
	return {ret[0] / ret[3], ret[1] / ret[3], ret[2] / ret[3] };
}

__device__ __host__
inline t_cmat4 translate(const t_cvec3 &pos)
{
	return {
		{1.0f, 0.0f, 0.0f, pos.v[0]},
		{0.0f, 1.0f, 0.0f, pos.v[1]},
		{0.0f, 0.0f, 1.0f, pos.v[2]},
		{0.0f, 0.0f, 0.0f, 1.0f}
	};
}
